name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        
    - name: Install dependencies
      run: poetry install
        
    - name: Run Flake8
      run: |
        poetry run flake8 frontend backend --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 frontend backend --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
        
    - name: Run Black
      run: poetry run black --check frontend backend
        
    - name: Run isort
      run: poetry run isort --check-only frontend backend
        
    - name: Check code documentation
      run: |
        poetry run pydocstyle frontend backend || echo "Some docstring issues found"
        # Create our custom document coverage script
        cat > check_docstrings.py << 'EOF'
import ast
import os
import sys
from typing import Dict, List, Set, Tuple

def has_docstring(node: ast.AST) -> bool:
    if not isinstance(node, (ast.Module, ast.ClassDef, ast.FunctionDef)):
        return False
    
    if (node.body and isinstance(node.body[0], ast.Expr) and 
            isinstance(node.body[0].value, ast.Str)):
        return True
    return False

def get_docstring_stats(file_path: str) -> Tuple[int, int, List[str]]:
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    try:
        tree = ast.parse(content)
    except SyntaxError:
        print(f"Syntax error in file: {file_path}")
        return 0, 0, []
    
    missing: List[str] = []
    need_docstring_count = 0
    has_docstring_count = 0
    
    if has_docstring(tree):
        has_docstring_count += 1
    else:
        need_docstring_count += 1
        missing.append(f"Module docstring in {file_path}")
    
    for node in ast.walk(tree):
        if isinstance(node, (ast.ClassDef, ast.FunctionDef)):
            if has_docstring(node):
                has_docstring_count += 1
            else:
                need_docstring_count += 1
                if isinstance(node, ast.ClassDef):
                    missing.append(f"Class '{node.name}' at line {node.lineno}")
                else:
                    missing.append(f"Function '{node.name}' at line {node.lineno}")
    
    return need_docstring_count, has_docstring_count, missing

def check_directory(directory: str, exclude: Set[str] = None) -> Dict[str, Tuple[int, int]]:
    if exclude is None:
        exclude = set()
        
    results = {}
    
    for root, dirs, files in os.walk(directory):
        dirs[:] = [d for d in dirs if d not in exclude and not d.startswith('.')]
        
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                need_count, has_count, missing = get_docstring_stats(file_path)
                
                if need_count + has_count > 0:  # Only include files with at least one function/class
                    results[file_path] = (need_count, has_count)
    
    return results

def calculate_coverage(results: Dict[str, Tuple[int, int]]) -> float:
    total_need = sum(need for need, _ in results.values())
    total_has = sum(has for _, has in results.values())
    
    if total_need + total_has == 0:
        return 100.0
    
    return (total_has / (total_need + total_has)) * 100.0

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python check_docstrings.py directory1 [directory2 ...] [--min-percentage=90.0]")
        sys.exit(1)
    
    dirs = [arg for arg in sys.argv[1:] if not arg.startswith('--')]
    
    min_pct = 90.0
    for arg in sys.argv[1:]:
        if arg.startswith('--min-percentage='):
            try:
                min_pct = float(arg.split('=')[1])
            except (IndexError, ValueError):
                print(f"Invalid min-percentage value: {arg}")
                sys.exit(1)
    
    exclude = {'__pycache__', 'venv', '.venv', 'env', '.env', '.git', 'migrations'}
    
    all_results = {}
    for directory in dirs:
        results = check_directory(directory, exclude)
        all_results.update(results)
    
    coverage = calculate_coverage(all_results)
    
    print(f"Docstring coverage: {coverage:.2f}%")
    
    if coverage < min_pct:
        print(f"Coverage below the minimum requirement of {min_pct}%")
        sys.exit(1)
    else:
        print(f"Coverage meets or exceeds the minimum requirement of {min_pct}%")
EOF
        # Run our custom script
        python check_docstrings.py frontend backend --min-percentage=90
        
    - name: Check maintainability
      run: |
        # Create our custom maintainability script
        cat > check_maintainability.py << 'EOF'
import ast
import math
import os
import sys
from typing import Dict, List, Set, Tuple

def calculate_cyclomatic_complexity(node: ast.AST) -> int:
    complexity = 1  # Base complexity
    
    for child in ast.walk(node):
        # Control flow statements increase complexity
        if isinstance(child, (ast.If, ast.While, ast.For)):
            complexity += 1
        # Logical operators are counted
        elif isinstance(child, ast.BoolOp) and isinstance(child.op, ast.And):
            complexity += len(child.values) - 1
        elif isinstance(child, ast.BoolOp) and isinstance(child.op, ast.Or):
            complexity += len(child.values) - 1
        # Exception handlers
        elif isinstance(child, ast.ExceptHandler):
            complexity += 1
        # Comprehensions
        elif isinstance(child, (ast.ListComp, ast.SetComp, ast.DictComp, ast.GeneratorExp)):
            complexity += len(child.generators)
    
    return complexity

def analyze_file(file_path: str) -> Dict[str, any]:
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            code = f.read()
    except (IOError, UnicodeDecodeError):
        return {"cc": 0, "mi": 0, "file_path": file_path}
    
    try:
        tree = ast.parse(code)
    except SyntaxError:
        return {"cc": 0, "mi": 0, "file_path": file_path}
    
    # Simple maintainability calculation
    lines = code.split('\n')
    loc = len([line for line in lines if line.strip() and not line.strip().startswith('#')])
    comments = len([line for line in lines if line.strip().startswith('#')])
    
    # Calculate complexity
    complexity = calculate_cyclomatic_complexity(tree)
    
    # Simple maintainability index formula
    comment_ratio = comments / max(loc, 1) * 100
    mi = 100 - (complexity * 0.2) - (loc * 0.05) + (comment_ratio * 0.1)
    mi = max(0, min(100, mi))  # Normalize to 0-100
    
    return {
        "cc": complexity,
        "mi": mi,
        "file_path": file_path,
    }

def analyze_directory(directory: str, exclude: Set[str] = None) -> List[Dict[str, any]]:
    if exclude is None:
        exclude = set()
        
    results = []
    
    for root, dirs, files in os.walk(directory):
        dirs[:] = [d for d in dirs if d not in exclude and not d.startswith('.')]
        
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                results.append(analyze_file(file_path))
    
    return results

def calculate_average_mi(results: List[Dict[str, any]]) -> float:
    if not results:
        return 0.0
    
    total_mi = sum(result["mi"] for result in results)
    return total_mi / len(results)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python check_maintainability.py directory1 [directory2 ...] [--min-mi=70.0]")
        sys.exit(1)
    
    dirs = [arg for arg in sys.argv[1:] if not arg.startswith('--')]
    
    min_mi = 70.0
    for arg in sys.argv[1:]:
        if arg.startswith('--min-mi='):
            try:
                min_mi = float(arg.split('=')[1])
            except (IndexError, ValueError):
                print(f"Invalid min-mi value: {arg}")
                sys.exit(1)
    
    exclude = {'__pycache__', 'venv', '.venv', 'env', '.env', '.git', 'migrations'}
    
    all_results = []
    for directory in dirs:
        results = analyze_directory(directory, exclude)
        all_results.extend(results)
    
    average_mi = calculate_average_mi(all_results)
    
    print(f"Average Maintainability Index: {average_mi:.2f}")
    
    if average_mi < min_mi:
        print(f"Average maintainability below the minimum requirement of {min_mi}")
        sys.exit(1)
    else:
        print(f"Maintainability meets or exceeds the minimum requirement of {min_mi}")
EOF
        # Run our custom script instead of radon
        python check_maintainability.py frontend backend --min-mi=70
        
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        
    - name: Install dependencies
      run: poetry install
        
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        USE_MOCK_TRANSLATION: ${{ secrets.USE_MOCK_TRANSLATION || 'True' }}
      run: |
        poetry run pytest --cov=frontend --cov=backend --cov-report=xml --cov-report=term-missing --cov-fail-under=60
        
    - name: Check test pass rate
      run: |
        TOTAL_TESTS=$(poetry run pytest --collect-only -q | wc -l)
        PASSED_TESTS=$(poetry run pytest -v | grep "PASSED" | wc -l)
        PASS_RATE=$((PASSED_TESTS * 100 / TOTAL_TESTS))
        if [ $PASS_RATE -lt 90 ]; then
          echo "Test pass rate is below 90% (current: $PASS_RATE%)"
          exit 1
        fi
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        
  performance:
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        
    - name: Install dependencies
      run: poetry install
        
    - name: Start API server
      env:
        RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        USE_MOCK_TRANSLATION: ${{ secrets.USE_MOCK_TRANSLATION || 'True' }}
      run: |
        poetry run uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
        sleep 10  # Wait for server to start
        
    - name: Run Locust performance tests
      run: |
        poetry run locust -f locustfile.py --headless -u 20 -r 1 --run-time 1m --host http://localhost:8000 --expect-workers 1
        
    - name: Check API response times
      run: |
        # Test key endpoints response times
        for endpoint in "/api/v1/notes" "/api/v1/auth/login"; do
          response_time=$(curl -w "%{time_total}" -o /dev/null -s "http://localhost:8000$endpoint")
          if (( $(echo "$response_time > 0.2" | bc -l) )); then
            echo "Response time for $endpoint exceeds 200ms (current: ${response_time}s)"
            exit 1
          fi
        done
        
  security:
    runs-on: ubuntu-latest
    needs: [quality-checks, test, performance]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        
    - name: Install dependencies
      run: poetry install
        
    - name: Run Bandit security checks
      run: poetry run bandit -r frontend backend -f json -o bandit-results.json
      
    - name: Check Bandit results
      run: |
        if [ -s bandit-results.json ]; then
          echo "Security issues found!"
          cat bandit-results.json
          exit 1
        fi
        
    - name: Check JWT token handling
      run: |
        poetry run python -c "
        from backend.app.core.security import create_access_token, verify_token
        token = create_access_token({'sub': 'test'})
        assert verify_token(token) is not None, 'JWT token verification failed'
        "
        
    - name: Check password hashing
      run: |
        poetry run python -c "
        import bcrypt
        password = b'testpass'
        hashed = bcrypt.hashpw(password, bcrypt.gensalt())
        assert bcrypt.checkpw(password, hashed), 'Password hashing verification failed'
        "
        
    - name: Check sensitive data exposure
      run: |
        poetry run python -c "
        import re
        with open('backend/app/api/endpoints/notes.py', 'r') as f:
            content = f.read()
        sensitive_patterns = [
            r'password',
            r'secret',
            r'api_key',
            r'token'
        ]
        for pattern in sensitive_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                print(f'Potential sensitive data exposure found: {pattern}')
                exit(1)
        "

  api-docs-and-security:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        export PATH="/root/.local/bin:$PATH"
        poetry --version
    
    - name: Install dependencies
      run: |
        poetry install
        poetry run pip install pyyaml openapi-spec-validator
    
    - name: Generate OpenAPI Schema
      run: |
        mkdir -p docs
        poetry run python generate_openapi.py
        # Verify the schema was generated
        ls -la docs/
        # Validate OpenAPI Schema
        poetry run openapi-spec-validator docs/openapi.json
    
    - name: Upload OpenAPI Schema as artifact
      uses: actions/upload-artifact@v3
      with:
        name: openapi-schema
        path: |
          docs/openapi.json
          docs/openapi.yaml
    
    # - name: Set up Go for Nuclei
    #   uses: actions/setup-go@v4
    #   with:
    #     go-version: '1.19'
    
    # - name: Install Nuclei and OpenAPI tools
    #   run: |
    #     # Install Nuclei
    #     go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
    #     echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        
    #     # Install openapi2postman for better API scanning
    #     npm install -g openapi-to-postmanv2
        
    #     # Install swagger-cli for schema validation
    #     npm install -g @apidevtools/swagger-cli
    
    # - name: Validate OpenAPI and Generate Postman Collection
    #   run: |
    #     # Validate OpenAPI Schema with Swagger CLI
    #     swagger-cli validate docs/openapi.json
        
    #     # Convert OpenAPI to Postman Collection for better API testing
    #     openapi2postmanv2 -s docs/openapi.json -o postman_collection.json -p
        
    #     # Check if conversion was successful
    #     if [ -f postman_collection.json ]; then
    #       echo "Successfully created Postman collection from OpenAPI schema"
    #       cat postman_collection.json | jq '.info.name'
    #     else
    #       echo "Failed to create Postman collection"
    #       exit 1
    #     fi
    
    # - name: Start API Server for DAST Testing
    #   env:
    #     RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
    #     SECRET_KEY: ${{ secrets.SECRET_KEY }}
    #     USE_MOCK_TRANSLATION: ${{ secrets.USE_MOCK_TRANSLATION || 'True' }}
    #   run: |
    #     poetry run uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
    #     # Wait for server to start
    #     sleep 10
    #     # Test if API is actually up and running with OpenAPI docs available
    #     curl -s http://localhost:8000/api/v1/openapi.json | jq '.info.title' || echo "API not ready"
    
    # - name: Run DAST Security Testing with Nuclei
    #   run: |
    #     # Create security reports directory
    #     mkdir -p security/reports
        
    #     # Update nuclei templates
    #     nuclei -update-templates
        
    #     # Run nuclei scan with OpenAPI integration where possible
    #     nuclei -u http://localhost:8000 \
    #           -severity medium,high,critical \
    #           -t nuclei-templates/http/ \
    #           -fhr \
    #           -json -o security/reports/nuclei_report.json \
    #           -rate-limit 10 \
    #           -timeout 5 || true
        
    #     # Also run specific OpenAPI-based tests if we have an OpenAPI schema path
    #     echo "Running OpenAPI specific tests based on schema"
    #     nuclei -u http://localhost:8000/api/v1 \
    #           -t nuclei-templates/http/openapi/ \
    #           -fhr \
    #           -json -o security/reports/nuclei_openapi_report.json \
    #           -rate-limit 10 \
    #           -timeout 5 || true
        
    #     # Check for vulnerabilities
    #     if [ -f security/reports/nuclei_report.json ]; then
    #       CRITICAL=$(grep -c '"severity":"critical"' security/reports/nuclei_report.json || echo 0)
    #       HIGH=$(grep -c '"severity":"high"' security/reports/nuclei_report.json || echo 0)
          
    #       echo "Found vulnerabilities: Critical: $CRITICAL, High: $HIGH"
          
    #       if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
    #         echo "Critical or high severity vulnerabilities found!"
    #         exit 1
    #       fi
    #     fi
        
    #     # Check OpenAPI specific report
    #     if [ -f security/reports/nuclei_openapi_report.json ]; then
    #       OPENAPI_CRITICAL=$(grep -c '"severity":"critical"' security/reports/nuclei_openapi_report.json || echo 0)
    #       OPENAPI_HIGH=$(grep -c '"severity":"high"' security/reports/nuclei_openapi_report.json || echo 0)
          
    #       echo "Found OpenAPI-based vulnerabilities: Critical: $OPENAPI_CRITICAL, High: $OPENAPI_HIGH"
          
    #       if [ "$OPENAPI_CRITICAL" -gt 0 ] || [ "$OPENAPI_HIGH" -gt 0 ]; then
    #         echo "Critical or high severity OpenAPI-based vulnerabilities found!"
    #         exit 1
    #       fi
    #     fi
    
    # - name: Upload Security Report as artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: security-report
    #     path: security/reports/ 